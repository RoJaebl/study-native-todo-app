{"version":3,"sources":["color.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","editText","setEditText","toDos","setToDos","refTextInput","useRef","useEffect","loadToDos","loadMode","setMode","mode","saveMode","AsyncStorage","setItem","JSON","stringify","load","getItem","parse","saveToDos","toSave","addToDo","newToDos","Date","now","isChecked","deleteToDo","key","Platform","OS","confirm","Alert","alert","onPress","CheckToDO","editToDo","payload","modifyToDO","View","style","styles","container","StatusBar","header","TouchableOpacity","Text","btnText","color","TextInput","onSubmitEditing","onChangeText","returnKeyType","value","input","placeholder","ScrollView","Object","keys","map","toDo","toDoSpan","BouncyCheckbox","size","fillColor","unfillColor","onFocus","onBlur","current","setSelection","start","end","textChecked","toDoText","width","editable","ref","iconBox","marginHorizontal","Fontisto","name","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","fontSize","fontWeight","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems","fontStyle","textDecorationLine","opacity"],"mappings":"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","file":"static/js/app.3e401c02.chunk.js","sourcesContent":["export const theme = {\n  bg: \"black\",\n  grey: \"#3A3D40\",\n  toDoBg: \"#5C5C60\",\n};\n","import { StatusBar } from \"expo-status-bar\";\nimport { useEffect, useRef, useState } from \"react\";\nimport {\n  Platform,\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  ScrollView,\n  Alert,\n} from \"react-native\";\nimport { theme } from \"./color\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { Fontisto, Entypo } from \"@expo/vector-icons\";\nimport BouncyCheckbox from \"react-native-bouncy-checkbox\";\n\nconst STORAGE_KEY = \"@toDos\";\nconst MODE_KEY = \"@mode\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [editText, setEditText] = useState({});\n  const [toDos, setToDos] = useState({});\n  const refTextInput = useRef(null);\n  useEffect(() => {\n    loadToDos();\n    loadMode();\n  }, []);\n  const setMode = async (mode) => {\n    setWorking(mode);\n    await saveMode(mode);\n  };\n  const saveMode = async (mode) => {\n    await AsyncStorage.setItem(MODE_KEY, JSON.stringify({ mode }));\n  };\n  const loadMode = async () => {\n    const load = await AsyncStorage.getItem(MODE_KEY);\n    if (load) {\n      setWorking(JSON.parse(load).mode);\n    }\n  };\n  const onChangeText = (payload) => setText(payload);\n  const saveToDos = async (toSave) =>\n    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n  const loadToDos = async () => {\n    const load = await AsyncStorage.getItem(STORAGE_KEY);\n    if (load) {\n      setToDos(JSON.parse(load));\n    }\n  };\n  const addToDo = async () => {\n    if (text == \"\") return;\n    else {\n      const newToDos = {\n        ...toDos,\n        [Date.now()]: { text, isChecked: false, working },\n      };\n      setToDos(newToDos);\n      await saveToDos(newToDos);\n      setText(\"\");\n    }\n  };\n  const deleteToDo = async (key) => {\n    if (Platform.OS == \"web\") {\n      const alert = confirm(\"Do you want to delete this To Do?\");\n      if (alert) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\"Delete To Do?\", \"Are you sure?\", [\n        { text: \"Cancel\" },\n        {\n          text: \"I'm Sure\",\n          onPress: () => {\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            saveToDos(newToDos);\n          },\n        },\n      ]);\n    }\n  };\n  const CheckToDO = async (key) => {\n    toDos[key].isChecked = toDos[key].isChecked ? false : true;\n    const newToDos = { ...toDos };\n    setToDos(newToDos);\n    saveToDos(newToDos);\n  };\n  const editToDo = (payload) =>\n    setEditText({ key: editText.key, text: payload });\n\n  const modifyToDO = async (key) => {\n    toDos[key].text = editText.text;\n    const newToDos = { ...toDos };\n    await saveToDos(newToDos);\n  };\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => setMode(true)}>\n          <Text\n            style={{ ...styles.btnText, color: working ? \"white\" : theme.grey }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={() => setMode(false)}>\n          <Text\n            style={{\n              ...styles.btnText,\n              color: !working ? \"white\" : theme.grey,\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput\n        onSubmitEditing={addToDo}\n        onChangeText={onChangeText}\n        returnKeyType=\"done\"\n        value={text}\n        style={styles.input}\n        placeholder={working ? \"Add a To Do\" : \"Where do you want to go?\"}\n      ></TextInput>\n      <ScrollView>\n        {Object.keys(toDos).map((key) =>\n          toDos[key].working == working ? (\n            <View style={styles.toDo} key={key}>\n              <View style={styles.toDoSpan}>\n                <BouncyCheckbox\n                  size={25}\n                  fillColor=\"springgreen\"\n                  unfillColor={theme.toDoBg}\n                  isChecked={toDos[key].isChecked}\n                  onPress={() => {\n                    CheckToDO(key);\n                  }}\n                />\n                <TextInput\n                  onFocus={() => setEditText({ key, text: toDos[key].text })}\n                  onBlur={() => {\n                    setEditText({ key: null, text: \"\" });\n                    refTextInput.current.setSelection[0] = () => ({\n                      start: 0,\n                      end: 0,\n                    });\n                    refTextInput.current.setSelection(0, 0);\n                  }}\n                  onChangeText={editToDo}\n                  onSubmitEditing={() => modifyToDO(key)}\n                  returnKeyType=\"done\"\n                  style={{\n                    ...(toDos[key].isChecked\n                      ? styles.textChecked\n                      : styles.toDoText),\n                    width: \"75%\",\n                  }}\n                  editable={toDos[key].isChecked ? false : true}\n                  value={key == editText.key ? editText.text : toDos[key].text}\n                  ref={refTextInput}\n                ></TextInput>\n              </View>\n              <View style={styles.iconBox}>\n                <TouchableOpacity\n                  style={{ marginHorizontal: 5 }}\n                  onPress={() => deleteToDo(key)}\n                >\n                  <Fontisto name=\"trash\" size={24} color={theme.grey} />\n                </TouchableOpacity>\n              </View>\n            </View>\n          ) : null\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  btnText: {\n    fontSize: 38,\n    fontWeight: \"600\",\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  toDo: {\n    backgroundColor: theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n  toDoSpan: {\n    backgroundColor: theme.toDoBg,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  textChecked: {\n    fontSize: 16,\n    color: \"white\",\n    fontWeight: \"500\",\n    fontStyle: \"italic\",\n    textDecorationLine: \"line-through\",\n    opacity: 0.5,\n  },\n  toDoText: {\n    fontSize: 16,\n    color: \"white\",\n    fontWeight: \"500\",\n    fontStyle: \"normal\",\n    textDecorationLine: \"none\",\n    opacity: 1,\n  },\n  iconBox: {\n    flexDirection: \"row\",\n  },\n});\n"],"sourceRoot":""}